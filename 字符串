python可以操作字符串，用单引号（' '）或者双引号(" ")都可以。
反斜杠(\)用于转义。例如：
>>> 'spam eggs'  #single quotes
'spam eggs'
>>> 'doesn\'t'  #use \' to escape the single quote...
"doesn't"
>>> "doesn't"  # or use th double quotes instead
"doesn't"
>>> '"Yes,"they said.'
'"Yes,"they said.'
>>> '"Isn\'t,"they said.'
'"Isn\'t,"they said.'
交互式解释器会为输出的字符串加注引号，特殊字符使用反斜杠转义。
虽然，有时输出的字符串看起来与输入的字符串不一样（外加的引号可能会改变），
但两个字符串是相同的。如果字符串中有单引号而没有双引号，该字符串外将加注双引号，
反之，则加注单引号。print() 函数输出的内容更简洁易读，它会省略两边的引号，并输出转义后的特殊字符：
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')
"Isn't," they said.
>>> s = 'First line.\nSecond line.'  # \n means newline
>>> s  # without print(), \n is included in the output
'First line.\nSecond line.'
>>> print(s)  # with print(), \n produces a new line
First line.
Second line.
如果不希望前置 \ 的字符转义成特殊字符，可以使用 原始字符串，在引号前添加 r 即可：
>>> print('C:\some\name')  # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name')  # note the r before the quote
C:\some\name
字符串字面值可以实现跨行连续输入。实现方式是用三引号："""...""" 或 '''...'''，
字符串行尾会自动加上回车换行，如果不需要回车换行，在行尾添加 \ 即可。示例如下：
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
字符串可以用 + 合并（粘到一起），也可以用 * 重复：
>>> 3 * 'un' + 'ium'
'unununium'
字符串支持 索引 （下标访问），第一个字符的索引是 0。单字符没有专用的类型，就是长度为一的字符串：
>>> word = 'Python'
>>> word[0]  # character in position 0
'P'
>>> word[5]  # character in position 5
'n'
索引还支持负数，用负数索引时，从右边开始计数：
>>> word[-1]  # last character
'n'
>>> word[-2]  # second-last character
'o'
>>> word[-6]
'P'
注意，-0 和 0 一样，因此，负数索引从 -1 开始。

除了索引，字符串还支持 切片。索引可以提取单个字符，切片 则提取子字符串：
>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'
注意，输出结果包含切片开始，但不包含切片结束。因此，s[:i] + s[i:] 总是等于 s：
>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'
切片索引的默认值很有用；省略开始索引时，默认值为 0，省略结束索引时，默认为到字符串的结尾：
>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'
还可以这样理解切片，索引指向的是字符 之间 ，第一个字符的左侧标为 0，最后一个字符的右侧标为 n ，n 是字符串长度。例如：
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
第一行数字是字符串中索引 0...6 的位置，第二行数字是对应的负数索引位置。i 到 j 的切片由 i 和 j 之间所有对应的字符组成。
对于使用非负索引的切片，如果两个索引都不越界，切片长度就是起止索引之差。例如， word[1:3] 的长度是 2。

索引越界会报错：
>>> word[42]  # the word only has 6 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
但是，切片会自动处理越界索引：
>>> word[4:42]
'on'
>>> word[42:]
''
Python 字符串不能修改，是 immutable 的。因此，为字符串中某个索引位置赋值会报错：
>>> word[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment

要生成不同的字符串，应新建一个字符串：
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'

内置函数 len() 返回字符串的长度：
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34
